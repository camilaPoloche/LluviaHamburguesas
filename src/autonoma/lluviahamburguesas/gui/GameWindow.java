/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package autonoma.lluviahamburguesas.gui;

import autonoma.lluviahamburguesas.elements.Cielo;
import autonoma.lluviahamburguesasBase.elements.GraphicContainer;
import autonoma.lluviahamburguesasBase.elements.Sprite;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Rectangle;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.IOException;
import javax.swing.JOptionPane;

/**
 *
 * @author maria
 */
public class GameWindow extends javax.swing.JFrame implements GraphicContainer{
    //Atributos
    /**
    * Instancia de Cielo
    */
    private Cielo cielo;
    /**
    * bandera para verificar si el juego se acabo o no
    */
    private boolean terminado = false;
    // Double Buffer
    private BufferedImage imagenBuffer;
    private Graphics gImagenBuffer;
    
    public static final int _WIDTH = 480;
    public static final int _HEIGHT = 480;
    
    /**
     * Inicializa los atributos de la clase GameWindow
     * @param cielo
    */    
    public GameWindow(Cielo cielo){
        this.cielo = cielo;
        initComponents();
        this.imagenBuffer = new BufferedImage(_WIDTH,_HEIGHT,
                                BufferedImage.TYPE_INT_RGB);
        
        this.gImagenBuffer = this.imagenBuffer.getGraphics();
    }
    
    /**
     * Metodo para cerrar la GameWindow
    */
    private void exitGame(){
        System.exit(0);
    }
    
    /**
     * Modifica la instancia de cielo
     * @param cielo
    */
    public void setCielo(Cielo cielo) {
        this.cielo = cielo;
    }
    
    /**
     * Reinicia el juego en caso de que el usuario lo desee
    */
    public void ganar (){
        this.terminado = false;
        
        JOptionPane.showMessageDialog(null, "Ganaste!! Tu puntaje fue: " + this.cielo.getPuntaje());
       
    }

    @Override
    public void update(Graphics g){
        cielo.paint(gImagenBuffer);
        g.drawImage(imagenBuffer, 0, 0, this);
    }
    
    @Override
    public void paint(Graphics g) {
        super.paint(g);  // Limpia el fondo automáticamente

        // Pintar el cielo de fondo (o la imagen de fondo)
        if (cielo != null) {
            cielo.paint(g);
        }

        // Pintar los sprites que estén en el contenedor
        if (cielo != null) {
            for (Sprite sprite : cielo.getSprites()) {
                sprite.paint(g);
            }
        }

        // Aquí puedes pintar texto, puntaje, etc.
        g.setColor(Color.WHITE);
    }
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        switch(evt.getKeyCode()){   
            
            case KeyEvent.VK_Q:
                exitGame();
            break;
        }
        repaint();                            
    }//GEN-LAST:event_formKeyPressed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        if (evt.getButton() == MouseEvent.BUTTON1) {  
            int x = evt.getX();
            int y = evt.getY();
            try{
                this.cielo.atraparSprite(x, y);
            }catch (IOException ev){
                System.out.println("Error obteniendo informacion del archivo");
            }
        }
        
        if (!terminado && this.cielo.getCantidadComida() == 0) {
            terminado = true;
            this.ganar();
            this.dispose();
        }
        if   (!terminado && this.cielo.getPuntaje() < 0){
            this.terminado = false;
        
            JOptionPane.showMessageDialog(null, "Perdiste!! Tu puntaje fue menor a 0: " + this.cielo.getPuntaje());
            this.dispose();
            
        }
        refresh();
    }//GEN-LAST:event_formMouseClicked

    /**
     * Metodo que actualiza los objetos sobre la GameWindow
    */
    @Override
    public void refresh() {
        this.repaint();
    }

    /**
     * Retorna las medidas del GameWindow
     * @return Rectangle
    */
    @Override
    public Rectangle getBoundaries() {
        return this.getBounds();
    }
 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
